{"dependencies": [{"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.11.18", "vulns": [{"id": "GHSA-9548-qrrj-x5pj", "fix_versions": ["3.12.14"], "aliases": ["CVE-2025-53643"], "description": "### Summary The Python parser is vulnerable to a request smuggling vulnerability due to not parsing trailer sections of an HTTP request.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or AIOHTTP_NO_EXTENSIONS is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  ----  Patch: https://github.com/aio-libs/aiohttp/commit/e8d774f635dc6d1cd3174d0e38891da5de0e2b6a"}]}, {"name": "aiosignal", "version": "1.3.2", "vulns": []}, {"name": "alembic", "version": "1.15.2", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.9.0", "vulns": []}, {"name": "appdirs", "version": "1.4.4", "vulns": []}, {"name": "asgiref", "version": "3.8.1", "vulns": []}, {"name": "asttokens", "version": "3.0.0", "vulns": []}, {"name": "async-timeout", "version": "4.0.3", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "auth0-python", "version": "4.9.0", "vulns": []}, {"name": "authlib", "version": "1.6.1", "vulns": []}, {"name": "awslabs-github-actions-mcp-server", "skip_reason": "Dependency not found on PyPI and could not be audited: awslabs-github-actions-mcp-server (0.0.1)"}, {"name": "awslabs-githubactions-mcp-server", "skip_reason": "Dependency not found on PyPI and could not be audited: awslabs-githubactions-mcp-server (0.0.1)"}, {"name": "backoff", "version": "2.2.1", "vulns": []}, {"name": "bandit", "version": "1.8.6", "vulns": []}, {"name": "bcrypt", "version": "4.3.0", "vulns": []}, {"name": "beautifulsoup4", "version": "4.13.4", "vulns": []}, {"name": "blinker", "version": "1.9.0", "vulns": []}, {"name": "boltons", "version": "21.0.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "bracex", "version": "2.6", "vulns": []}, {"name": "build", "version": "1.2.2.post1", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "5.5.2", "vulns": []}, {"name": "certifi", "version": "2025.1.31", "vulns": []}, {"name": "cffi", "version": "1.17.1", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.1", "vulns": []}, {"name": "chroma-hnswlib", "version": "0.7.6", "vulns": []}, {"name": "chromadb", "version": "0.5.23", "vulns": []}, {"name": "click", "version": "8.1.8", "vulns": []}, {"name": "click-option-group", "version": "0.5.7", "vulns": []}, {"name": "cohere", "version": "5.15.0", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "coloredlogs", "version": "15.0.1", "vulns": []}, {"name": "contourpy", "version": "1.3.2", "vulns": []}, {"name": "crewai", "version": "0.114.0", "vulns": []}, {"name": "crewai-tools", "version": "0.40.1", "vulns": []}, {"name": "cryptography", "version": "44.0.2", "vulns": []}, {"name": "cycler", "version": "0.12.1", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "dataclasses-json", "version": "0.6.7", "vulns": []}, {"name": "decorator", "version": "5.2.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "deprecated", "version": "1.2.18", "vulns": []}, {"name": "deprecation", "version": "2.1.0", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "docker", "version": "7.1.0", "vulns": []}, {"name": "docstring-parser", "version": "0.16", "vulns": []}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "durationpy", "version": "0.9", "vulns": []}, {"name": "embedchain", "version": "0.1.128", "vulns": []}, {"name": "et-xmlfile", "version": "2.0.0", "vulns": []}, {"name": "exceptiongroup", "version": "1.2.2", "vulns": []}, {"name": "executing", "version": "2.2.0", "vulns": []}, {"name": "face", "version": "24.0.0", "vulns": []}, {"name": "fastapi", "version": "0.115.9", "vulns": []}, {"name": "fastavro", "version": "1.10.0", "vulns": []}, {"name": "filelock", "version": "3.16.1", "vulns": []}, {"name": "flatbuffers", "version": "25.2.10", "vulns": []}, {"name": "fonttools", "version": "4.58.1", "vulns": []}, {"name": "frozenlist", "version": "1.6.0", "vulns": []}, {"name": "fsspec", "version": "2025.3.2", "vulns": []}, {"name": "glom", "version": "22.1.0", "vulns": []}, {"name": "google-auth", "version": "2.39.0", "vulns": []}, {"name": "googleapis-common-protos", "version": "1.70.0", "vulns": []}, {"name": "gptcache", "version": "0.1.44", "vulns": []}, {"name": "grpcio", "version": "1.71.0", "vulns": []}, {"name": "h11", "version": "0.14.0", "vulns": [{"id": "GHSA-vqfr-h8mv-ghfj", "fix_versions": ["0.16.0"], "aliases": ["CVE-2025-43859"], "description": "### Impact  A leniency in h11's parsing of line terminators in chunked-coding message bodies can lead to request smuggling vulnerabilities under certain conditions.  ### Details  HTTP/1.1 Chunked-Encoding bodies are formatted as a sequence of \"chunks\", each of which consists of:  - chunk length - `\\r\\n` - `length` bytes of content - `\\r\\n`  In versions of h11 up to 0.14.0, h11 instead parsed them as:  - chunk length - `\\r\\n` - `length` bytes of content - any two bytes  i.e. it did not validate that the trailing `\\r\\n` bytes were correct, and if you put 2 bytes of garbage there it would be accepted, instead of correctly rejecting the body as malformed.  By itself this is harmless. However, suppose you have a proxy or reverse-proxy that tries to analyze HTTP requests, and your proxy has a _different_ bug in parsing Chunked-Encoding, acting as if the format is:  - chunk length - `\\r\\n` - `length` bytes of content - more bytes of content, as many as it takes until you find a `\\r\\n`  For example, [pound](https://github.com/graygnuorg/pound/pull/43) had this bug -- it can happen if an implementer uses a generic \"read until end of line\" helper to consumes the trailing `\\r\\n`.  In this case, h11 and your proxy may both accept the same stream of bytes, but interpret them differently. For example, consider the following HTTP request(s) (assume all line breaks are `\\r\\n`):  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX2 45 0  GET /two HTTP/1.1 Host: localhost Transfer-Encoding: chunked  0 ```  Here h11 will interpret it as two requests, one with body `AAAAA45` and one with an empty body, while our hypothetical buggy proxy will interpret it as a single request, with body `AAAAXX20\\r\\n\\r\\nGET /two ...`. And any time two HTTP processors both accept the same string of bytes but interpret them differently, you have the conditions for a \"request smuggling\" attack. For example, if `/two` is a dangerous endpoint and the job of the reverse proxy is to stop requests from getting there, then an attacker could use a bytestream like the above to circumvent this protection.  Even worse, if our buggy reverse proxy receives two requests from different users:  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX999 0 ```  ``` GET /two HTTP/1.1 Host: localhost Cookie: SESSION_KEY=abcdef... ```  ...it will consider the first request to be complete and valid, and send both on to the h11-based web server over the same socket. The server will then see the two concatenated requests, and interpret them as _one_ request to `/one` whose body includes `/two`'s session key, potentially allowing one user to steal another's credentials.  ### Patches  Fixed in h11 0.15.0.  ### Workarounds  Since exploitation requires the combination of buggy h11 with a buggy (reverse) proxy, fixing either component is sufficient to mitigate this issue.  ### Credits  Reported by Jeppe Bonde Weikop on 2025-01-09."}]}, {"name": "h2", "version": "4.2.0", "vulns": []}, {"name": "hpack", "version": "4.1.0", "vulns": []}, {"name": "httpcore", "version": "1.0.8", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "httpx", "version": "0.27.2", "vulns": []}, {"name": "httpx-sse", "version": "0.4.0", "vulns": []}, {"name": "huggingface-hub", "version": "0.30.2", "vulns": []}, {"name": "humanfriendly", "version": "10.0", "vulns": []}, {"name": "hyperframe", "version": "6.1.0", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "importlib-metadata", "version": "7.1.0", "vulns": []}, {"name": "importlib-resources", "version": "6.5.2", "vulns": []}, {"name": "instructor", "version": "1.7.9", "vulns": []}, {"name": "ipython", "version": "8.35.0", "vulns": []}, {"name": "jedi", "version": "0.19.2", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "jiter", "version": "0.8.2", "vulns": []}, {"name": "joblib", "version": "1.5.1", "vulns": []}, {"name": "json-repair", "version": "0.42.0", "vulns": []}, {"name": "json5", "version": "0.12.0", "vulns": []}, {"name": "jsonpatch", "version": "1.33", "vulns": []}, {"name": "jsonpickle", "version": "4.0.5", "vulns": []}, {"name": "jsonpointer", "version": "3.0.0", "vulns": []}, {"name": "jsonref", "version": "1.1.0", "vulns": []}, {"name": "jsonschema", "version": "4.23.0", "vulns": []}, {"name": "jsonschema-specifications", "version": "2024.10.1", "vulns": []}, {"name": "kiwisolver", "version": "1.4.8", "vulns": []}, {"name": "kubernetes", "version": "32.0.1", "vulns": []}, {"name": "lancedb", "version": "0.21.2", "vulns": []}, {"name": "langchain", "version": "0.3.24", "vulns": []}, {"name": "langchain-cohere", "version": "0.3.5", "vulns": []}, {"name": "langchain-community", "version": "0.3.22", "vulns": []}, {"name": "langchain-core", "version": "0.3.55", "vulns": []}, {"name": "langchain-experimental", "version": "0.3.4", "vulns": []}, {"name": "langchain-openai", "version": "0.2.14", "vulns": []}, {"name": "langchain-text-splitters", "version": "0.3.8", "vulns": []}, {"name": "langsmith", "version": "0.3.33", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "litellm", "version": "1.60.2", "vulns": [{"id": "GHSA-fjcf-3j3r-78rp", "fix_versions": ["1.61.15"], "aliases": ["CVE-2025-0628"], "description": "An improper authorization vulnerability exists in the main-latest version of BerriAI/litellm. When a user with the role 'internal_user_viewer' logs into the application, they are provided with an overly privileged API key. This key can be used to access all the admin functionality of the application, including endpoints such as '/users/list' and '/users/get_users'. This vulnerability allows for privilege escalation within the application, enabling any account to become a PROXY ADMIN."}]}, {"name": "loguru", "version": "0.7.3", "vulns": []}, {"name": "mako", "version": "1.3.10", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "3.26.1", "vulns": []}, {"name": "matplotlib", "version": "3.10.3", "vulns": []}, {"name": "matplotlib-inline", "version": "0.1.7", "vulns": []}, {"name": "mcp", "version": "1.9.2", "vulns": [{"id": "GHSA-3qhf-m339-9g5v", "fix_versions": ["1.9.4"], "aliases": ["CVE-2025-53366"], "description": "A validation error in the MCP SDK can cause an unhandled exception when processing malformed requests, resulting in service unavailability (500 errors) until manually restarted. Impact may vary depending on the deployment conditions, and presence of infrastructure-level resilience measures.  Thank you to Rich Harang for reporting this issue."}, {"id": "GHSA-j975-95f5-7wqh", "fix_versions": ["1.10.0"], "aliases": ["CVE-2025-53365"], "description": "If a client deliberately triggers an exception after establishing a streamable HTTP session, this can lead to an uncaught ClosedResourceError on the server side, causing the server to crash and requiring a restart to restore service. Impact may vary depending on the deployment conditions, and presence of infrastructure-level resilience measures.  Thank you to Rich Harang for reporting this issue."}]}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "mem0ai", "version": "0.1.93", "vulns": []}, {"name": "mmh3", "version": "5.1.0", "vulns": []}, {"name": "monotonic", "version": "1.6", "vulns": []}, {"name": "mpmath", "version": "1.3.0", "vulns": []}, {"name": "msgpack", "version": "1.1.1", "vulns": []}, {"name": "multidict", "version": "6.4.3", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "networkx", "version": "3.4.2", "vulns": []}, {"name": "nltk", "version": "3.9.1", "vulns": []}, {"name": "nodeenv", "version": "1.9.1", "vulns": []}, {"name": "numpy", "version": "2.2.5", "vulns": []}, {"name": "oauthlib", "version": "3.2.2", "vulns": []}, {"name": "onnxruntime", "version": "1.21.1", "vulns": []}, {"name": "openai", "version": "1.75.0", "vulns": []}, {"name": "openpyxl", "version": "3.1.5", "vulns": []}, {"name": "opentelemetry-api", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-common", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-grpc", "version": "1.32.1", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-http", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-instrumentation", "version": "0.46b0", "vulns": []}, {"name": "opentelemetry-instrumentation-asgi", "version": "0.53b1", "vulns": []}, {"name": "opentelemetry-instrumentation-fastapi", "version": "0.53b1", "vulns": []}, {"name": "opentelemetry-instrumentation-requests", "version": "0.46b0", "vulns": []}, {"name": "opentelemetry-proto", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-sdk", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-semantic-conventions", "version": "0.46b0", "vulns": []}, {"name": "opentelemetry-util-http", "version": "0.46b0", "vulns": []}, {"name": "orjson", "version": "3.10.16", "vulns": []}, {"name": "overrides", "version": "7.7.0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.1", "vulns": []}, {"name": "packaging", "version": "24.2", "vulns": []}, {"name": "pandas", "version": "2.2.3", "vulns": []}, {"name": "parso", "version": "0.8.4", "vulns": []}, {"name": "pbr", "version": "6.1.1", "vulns": []}, {"name": "pdfminer-six", "version": "20250327", "vulns": []}, {"name": "pdfplumber", "version": "0.11.6", "vulns": []}, {"name": "peewee", "version": "3.18.2", "vulns": []}, {"name": "pexpect", "version": "4.9.0", "vulns": []}, {"name": "pillow", "version": "11.2.1", "vulns": [{"id": "PYSEC-2025-61", "fix_versions": ["11.3.0"], "aliases": ["CVE-2025-48379", "GHSA-xg8h-j46f-w952"], "description": "Pillow is a Python imaging library. In versions 11.2.0 to before 11.3.0, there is a heap buffer overflow when writing a sufficiently large (>64k encoded with default settings) image in the DDS format due to writing into a buffer without checking for available space. This only affects users who save untrusted data as a compressed DDS image. This issue has been patched in version 11.3.0."}]}, {"name": "pip", "version": "23.0.1", "vulns": [{"id": "PYSEC-2023-228", "fix_versions": ["23.3"], "aliases": ["CVE-2023-5752"], "description": "When installing a package from a Mercurial VCS URL  (ie \"pip install  hg+...\") with pip prior to v23.3, the specified Mercurial revision could  be used to inject arbitrary configuration options to the \"hg clone\"  call (ie \"--config\"). Controlling the Mercurial configuration can modify  how and which repository is installed. This vulnerability does not  affect users who aren't installing from Mercurial. "}]}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "portalocker", "version": "2.10.1", "vulns": []}, {"name": "posthog", "version": "3.25.0", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.51", "vulns": []}, {"name": "propcache", "version": "0.3.1", "vulns": []}, {"name": "protobuf", "version": "4.25.8", "vulns": []}, {"name": "psutil", "version": "6.1.1", "vulns": []}, {"name": "psycopg2-binary", "version": "2.9.10", "vulns": []}, {"name": "ptyprocess", "version": "0.7.0", "vulns": []}, {"name": "pure-eval", "version": "0.2.3", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "pyarrow", "version": "19.0.1", "vulns": []}, {"name": "pyasn1", "version": "0.6.1", "vulns": []}, {"name": "pyasn1-modules", "version": "0.4.2", "vulns": []}, {"name": "pycparser", "version": "2.22", "vulns": []}, {"name": "pydantic", "version": "2.9.2", "vulns": []}, {"name": "pydantic-core", "version": "2.23.4", "vulns": []}, {"name": "pydantic-settings", "version": "2.9.1", "vulns": []}, {"name": "pygithub", "version": "2.6.1", "vulns": []}, {"name": "pygments", "version": "2.19.1", "vulns": []}, {"name": "pyjwt", "version": "2.10.1", "vulns": []}, {"name": "pynacl", "version": "1.5.0", "vulns": []}, {"name": "pyparsing", "version": "3.2.3", "vulns": []}, {"name": "pypdf", "version": "5.4.0", "vulns": []}, {"name": "pypdfium2", "version": "4.30.1", "vulns": []}, {"name": "pypika", "version": "0.48.9", "vulns": []}, {"name": "pyproject-hooks", "version": "1.2.0", "vulns": []}, {"name": "pyright", "version": "1.1.399", "vulns": []}, {"name": "pysbd", "version": "0.3.4", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.1.0", "vulns": []}, {"name": "python-multipart", "version": "0.0.20", "vulns": []}, {"name": "pytube", "version": "15.0.0", "vulns": []}, {"name": "pytz", "version": "2024.2", "vulns": []}, {"name": "pyvis", "version": "0.3.2", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "qdrant-client", "version": "1.14.1", "vulns": []}, {"name": "referencing", "version": "0.36.2", "vulns": []}, {"name": "regex", "version": "2024.11.6", "vulns": []}, {"name": "requests", "version": "2.32.3", "vulns": [{"id": "GHSA-9hjg-9r4m-mvj7", "fix_versions": ["2.32.4"], "aliases": ["CVE-2024-47081"], "description": "### Impact  Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.  ### Workarounds For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).  ### References https://github.com/psf/requests/pull/6965 https://seclists.org/fulldisclosure/2025/Jun/2"}]}, {"name": "requests-oauthlib", "version": "2.0.0", "vulns": []}, {"name": "requests-toolbelt", "version": "1.0.0", "vulns": []}, {"name": "rich", "version": "13.5.3", "vulns": []}, {"name": "rpds-py", "version": "0.24.0", "vulns": []}, {"name": "rsa", "version": "4.9.1", "vulns": []}, {"name": "ruamel-yaml", "version": "0.18.14", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.12", "vulns": []}, {"name": "safety", "version": "3.6.0", "vulns": []}, {"name": "safety-schemas", "version": "0.0.14", "vulns": []}, {"name": "schema", "version": "0.7.7", "vulns": []}, {"name": "semgrep", "version": "1.130.0", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "soupsieve", "version": "2.7", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.40", "vulns": []}, {"name": "sse-starlette", "version": "2.3.5", "vulns": []}, {"name": "stack-data", "version": "0.6.3", "vulns": []}, {"name": "starlette", "version": "0.45.3", "vulns": [{"id": "GHSA-2c2j-9gv5-cj73", "fix_versions": ["0.47.2"], "aliases": ["CVE-2025-54121"], "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."}]}, {"name": "stevedore", "version": "5.4.1", "vulns": []}, {"name": "sympy", "version": "1.13.3", "vulns": []}, {"name": "tabulate", "version": "0.9.0", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "tiktoken", "version": "0.9.0", "vulns": []}, {"name": "tokenizers", "version": "0.20.3", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.0.2", "vulns": []}, {"name": "tomli-w", "version": "1.2.0", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "traitlets", "version": "5.14.3", "vulns": []}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "types-requests", "version": "2.32.0.20250328", "vulns": []}, {"name": "typing-extensions", "version": "4.13.2", "vulns": []}, {"name": "typing-inspect", "version": "0.9.0", "vulns": []}, {"name": "typing-inspection", "version": "0.4.0", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "urllib3", "version": "2.4.0", "vulns": [{"id": "GHSA-48p4-8xcf-vxj5", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50182"], "description": "urllib3 [supports](https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html) being used in a Pyodide runtime utilizing the [JavaScript Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) or falling back on [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest). This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides [a mechanism](https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests) to control redirects.  However, the `retries` and `redirect` parameters are ignored with Pyodide; the runtime itself determines redirect behavior.   ## Affected usages  Any code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.   ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.   ## Remediation  If you use urllib3 in Node.js, upgrade to a patched version of urllib3.  Unfortunately, browsers provide no suitable way which urllib3 can use: `XMLHttpRequest` provides no control over redirects, the Fetch API returns `opaqueredirect` responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects."}, {"id": "GHSA-pq67-6m6q-mj2v", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50181"], "description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:  ```python resp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False) print(resp.status) # 302 ```  However, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:  ```python import urllib3  http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above http = urllib3.PoolManager(retries=False)  # should return the first response  resp = http.request(\"GET\", \"https://httpbin.org/redirect/1\") ```  However, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.  ## Affected usages  Passing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.  By default, requests and botocore users are not affected.  ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.  ## Remediation  You can remediate this vulnerability with the following steps:   * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.  * Disable redirects at the `request()` level instead of the `PoolManager()` level."}]}, {"name": "uv", "version": "0.6.16", "vulns": []}, {"name": "uvicorn", "version": "0.34.2", "vulns": []}, {"name": "uvloop", "version": "0.21.0", "vulns": []}, {"name": "watchfiles", "version": "1.0.5", "vulns": []}, {"name": "wcmatch", "version": "8.5.2", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "wrapt", "version": "1.17.2", "vulns": []}, {"name": "yarl", "version": "1.20.0", "vulns": []}, {"name": "zipp", "version": "3.21.0", "vulns": []}, {"name": "zstandard", "version": "0.23.0", "vulns": []}], "fixes": []}
